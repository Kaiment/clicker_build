{"version":3,"sources":["helpers.tsx","components/Work/Producer.tsx","components/Multiplactor/Multiplicator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["helpers","numberWithCommas","x","toString","replace","Work","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addWork","bind","assertThisInitialized","_this$props","add_work","id","neuron_count","price","_this$props2","name","prod","react_default","a","createElement","onClick","className","count","Component","Multiplicator","AddMultiplicator","add_multiplicator","App","state","neuron_prod","producers","key","multiplicator_price","base_prod","add_neuron","total_production","forEach","producer","setState","Math","ceil","compute_production","_this2","setInterval","_this3","_this$state3","producers_list","map","p","Producer_Work","multiplicators_list","Multiplicator_Multiplicator","Row","Col","md","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb052be4.chunk.js","sourcesContent":["const helpers = {\n    numberWithCommas(x: number) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n}\n\nexport default helpers;","import React, { Component } from 'react';\nimport helpers from '../../helpers';\nimport './producer.css';\nimport '../../App.css';\n\ninterface IProps {\n  key: number,\n  id: number,\n  name: string,\n  price: number,\n  prod: number,\n  count: number,\n  neuron_count: number,\n  add_work: any,\n}\n\nexport default class Work extends Component<IProps> {\n  constructor(props: IProps) {\n    super(props);\n    this.addWork = this.addWork.bind(this);\n  }\n\n  private addWork() {\n    const { add_work, id, neuron_count, price } = this.props;\n    if (neuron_count >= price) {\n      add_work(id);\n    }\n  }\n\n  public render() {\n     const { neuron_count, name, prod, price } = this.props;\n    return (\n      <div onClick={this.addWork} className={ neuron_count >= price ? \"available producer\" : \"unavailable producer\"}>\n        <div className='prod_name noselect'>{ name }</div>\n        <div className='noselect'>price: { helpers.numberWithCommas(price) }, prod: { helpers.numberWithCommas(prod) } per second</div>\n        <div className='noselect'>count: { helpers.numberWithCommas(this.props.count) }</div>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport './multiplicator.css';\nimport '../Work/producer.css'\nimport '../../App.css';\n\ninterface IProps {\n  key: number,\n  id: number,\n  name: string,\n  price: number,\n  neuron_count: number,\n  add_multiplicator: any,\n}\n\nexport default class Multiplicator extends Component<IProps> {\n  constructor(props: IProps) {\n    super(props);\n    this.AddMultiplicator = this.AddMultiplicator.bind(this)\n  }\n\n  private AddMultiplicator() {\n    const { add_multiplicator, neuron_count, price, id } = this.props;\n    if (neuron_count >= price) {\n      add_multiplicator(id)\n    }\n  }\n\n  public render() {\n    const { price, name, neuron_count } = this.props;\n    return (\n      <div onClick={ this.AddMultiplicator } className={ neuron_count >= price ? 'available producer' : 'unavailable producer'}>\n        <div className='noselect'>{ name } multiplicator </div>\n        <div className='noselect'>price: { price }</div>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport Producer from './components/Work/Producer';\nimport Multiplicator from './components/Multiplactor/Multiplicator';\nimport { Row, Col } from 'react-bootstrap';\nimport helpers from './helpers';\nimport './App.css';\n\ninterface producer {\n  key: number,\n  name: string,\n  price: number,\n  multiplicator_price: number,\n  prod: number,\n  base_prod: number,\n  count: number,\n}\n\ninterface IState {\n  neuron_count: number;\n  neuron_prod: number;\n  producers: [producer, producer, producer, producer, producer, producer], \n}\n\nclass App extends Component<{}, IState> {\n  constructor(props: any) {\n    super(props);\n    this.add_neuron = this.add_neuron.bind(this);\n  };\n\n  public readonly state: Readonly<IState> = {\n    neuron_count: 0,\n    neuron_prod: 0,\n    producers: [\n      { key: 0, name: 'Working', price: 2, multiplicator_price: 4, prod: 1, base_prod: 1, count: 0 },\n      { key: 1, name: 'Reading a book', price: 41, multiplicator_price: 125, prod: 16, base_prod: 16, count: 0 },\n      { key: 2, name: 'Reading the documentation', price: 101, multiplicator_price: 255, prod: 64, base_prod: 64, count: 0 },\n      { key: 3, name: 'Test and retry', price: 1024, multiplicator_price: 1500, prod: 256, base_prod: 256, count: 0 },\n      { key: 4, name: 'Copy/pasting from Github', price: 10338, multiplicator_price: 26000, prod: 1337, base_prod: 1337, count: 0 },\n      { key: 5, name: 'Stealing someone\\'s code and pretending it\\'s yours', price: 420101, multiplicator_price: 1000000, prod: 37197, base_prod: 37197, count: 0 },\n    ],\n  };\n\n  private compute_production() {\n    const { producers } = this.state;\n    let total_production = 0;\n    producers.forEach(producer => {\n      total_production += producer.prod * producer.count;\n    });\n    this.setState(state => ({\n      neuron_prod: total_production,\n    }));\n  }\n\n  private add_neuron() {\n    this.setState(state => ({\n      neuron_count: state.neuron_count + 1,\n    }))\n  };\n\n  private async add_work(id: number) {\n    const { producers, neuron_count } = this.state;\n    await this.setState(state => ({\n      neuron_count: neuron_count - producers[id].price,\n    }))\n    producers[id].count += 1;\n    producers[id].price = Math.ceil(producers[id].price * 1.3);\n    this.compute_production();\n  }\n\n  private async add_multiplicator(id: number) {\n    const { producers, neuron_count } = this.state;\n    await this.setState(state => ({\n      neuron_count: state.neuron_count - producers[id].multiplicator_price,\n    }));\n    producers[id].prod += producers[id].base_prod;\n    producers[id].multiplicator_price = Math.ceil(producers[id].multiplicator_price * 2.3);\n    this.compute_production(); \n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this.setState(state => ({\n        neuron_count: state.neuron_count + this.state.neuron_prod,\n      }))\n    }, 1000);\n  }\n\n  render() {\n    const { neuron_count, neuron_prod } = this.state;\n    const producers_list = this.state.producers.map((p) =>\n      <Producer key={p.key} id={p.key} name={p.name} price={p.price} prod={p.prod} count={p.count} neuron_count={neuron_count} add_work={this.add_work.bind(this)} />\n    )\n    const multiplicators_list = this.state.producers.map((p) =>\n      <Multiplicator key={p.key} id={p.key} name={p.name} price={p.multiplicator_price} neuron_count={neuron_count} add_multiplicator={this.add_multiplicator.bind(this)} />\n    )\n\n    return (\n      <div className=\"App\">\n        <div>\n          <Row>\n            <Col md={5}>\n              <div className='noselect'>{ helpers.numberWithCommas(neuron_count) } neurons</div>\n              <div className='noselect'>{ helpers.numberWithCommas(neuron_prod) } per second</div>\n              <h1 onClick={ this.add_neuron } className='brain noselect'>BRAIN</h1>\n            </Col>\n            <Col md={5}>\n              {producers_list}\n            </Col>\n            <Col md={2}>\n              { multiplicators_list }\n            </Col>\n          </Row>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}