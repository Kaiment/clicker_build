{"version":3,"sources":["helpers.tsx","components/Work/Producer.tsx","components/Multiplactor/Multiplicator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["helpers","numberWithCommas","x","toString","replace","Work","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","price","prod_value","addWork","bind","assertThisInitialized","_this$state","_this$props","prod","id","neuron_count","setState","Math","ceil","add_work","_this$props2","name","react_default","a","createElement","onClick","className","work_count","Component","Multiplicator","AddMultiplicator","add_multiplicator","App","neuron_prod","producers","key","mult_count","mult_price","add_neuron","total_prod","forEach","producer","_this2","map","p","calc_prod","_this3","_this4","setInterval","_this5","producers_list","Producer_Work","multiplicators_list","Multiplicator_Multiplicator","Row","Col","md","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c5c1661a.chunk.js","sourcesContent":["const helpers = {\n    numberWithCommas(x: number) {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n}\n\nexport default helpers;","import React, { Component } from 'react';\nimport helpers from '../../helpers';\nimport './producer.css';\nimport '../../App.css';\n\ninterface IState {\n  price: number,\n  prod_value: number,\n}\n\ninterface IProps {\n  key: number,\n  id: number,\n  neuron_count: number,\n  work_count: number,\n  add_work: any,\n  prod: number,\n  price: number,\n  name: string,\n}\n\nexport default class Work extends Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n    this.addWork = this.addWork.bind(this);\n  }\n\n  public readonly state: Readonly<IState> = {\n    price: this.props.price,\n    prod_value: 0,\n  }\n\n  private addWork() {\n    const { price, prod_value } = this.state;\n    const { prod, id } = this.props;\n    if (this.props.neuron_count >= this.state.price) {\n      this.setState(state => ({\n        prod_value: state.prod_value + prod,\n        price: Math.ceil(state.price * 1.2),\n      }))\n      this.props.add_work(id, price, prod_value);\n    }\n  }\n\n  public render() {\n    const { price } = this.state;\n    const { neuron_count, name, prod } = this.props;\n    return (\n      <div onClick={this.addWork} className={ neuron_count >= price ? \"available producer\" : \"unavailable producer\"}>\n        <div className='prod_name noselect'>{ name }</div>\n        <div className='noselect'>price: { helpers.numberWithCommas(price) }, prod: { helpers.numberWithCommas(prod) } per second</div>\n        <div className='noselect'>count: { helpers.numberWithCommas(this.props.work_count) }</div>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport './multiplicator.css';\nimport '../Work/producer.css'\nimport '../../App.css';\n\ninterface IState {\n  price: number,\n}\n\ninterface IProps {\n  key: number,\n  id: number,\n  neuron_count: number,\n  mult_count: number,\n  name: string,\n  price: number,\n  add_multiplicator: any,\n}\n\nexport default class Multiplicator extends Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n    this.AddMultiplicator = this.AddMultiplicator.bind(this)\n  }\n\n  public readonly state: Readonly<IState> = {\n    price: this.props.price,\n  }\n\n  private AddMultiplicator() {\n    const { price } = this.state;\n    const { id, neuron_count } = this.props;\n    if (neuron_count >= price) {\n      this.props.add_multiplicator(id, price);\n      this.setState(state => ({\n        price: Math.ceil(price * 12.2)\n      }))\n    }\n  }\n\n  public render() {\n    const { price } = this.state;\n    const { name, neuron_count } = this.props;\n    return (\n      <div onClick={ this.AddMultiplicator } className={ neuron_count >= price ? 'available producer' : 'unavailable producer'}>\n        <div className='noselect'>{ name } multiplicator </div>\n        <div className='noselect'>price: { price }</div>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport Producer from './components/Work/Producer';\nimport Multiplicator from './components/Multiplactor/Multiplicator';\nimport { Row, Col } from 'react-bootstrap';\nimport helpers from './helpers';\nimport './App.css';\n\ninterface producer {\n  key: number,\n  name: string,\n  work_count: number,\n  prod_value: number,\n  prod: number,\n  price: number,\n  mult_count: number,\n  mult_price: number,\n}\n\ninterface IState {\n  neuron_count: number;\n  neuron_prod: number;\n  producers: [producer, producer, producer, producer, producer, producer, producer], \n}\n\nclass App extends Component<{}, IState> {\n  constructor(props: any) {\n    super(props);\n    this.add_neuron = this.add_neuron.bind(this);\n  };\n\n  public readonly state: Readonly<IState> = {\n    neuron_count: 0,\n    neuron_prod: 0,\n    producers: [\n      { key: 0, name: 'Work', work_count: 0, prod_value: 0, prod: 1, price: 2, mult_count: 1, mult_price: 10 },\n      { key: 1, name: 'Book', work_count: 0, prod_value: 0, prod: 16, price: 42, mult_count: 1, mult_price: 1000 },\n      { key: 2, name: 'Youtube video', work_count: 0, prod_value: 0, prod: 32, price: 101, mult_count: 1, mult_price: 10000 },\n      { key: 3, name: 'Github and Stack Overflow', work_count: 0, prod_value: 0, prod: 375, price: 4004, mult_count: 1, mult_price: 100000 },\n      { key: 4, name: 'Attend to a Flat earther conference', work_count: 0, prod_value: 0, prod: 3600, price: 84000, mult_count: 1, mult_price: 10000000 },\n      { key: 5, name: 'Using Google', work_count: 0, prod_value: 0, prod: 400413, price: 1040404, mult_count: 1, mult_price: 1000000000 },\n      { key: 6, name: 'Cerebral chip', work_count: 0, prod_value: 0, prod: 5120000, price: 36021666, mult_count: 1, mult_price: 999999999 },\n    ]\n  };\n\n  private calc_prod() {\n    let total_prod = 0;\n    this.state.producers.forEach(producer => {\n      total_prod += producer.prod_value * producer.mult_count;\n    });\n    return total_prod;\n  }\n\n  private add_neuron() {\n    this.setState(state => ({\n      neuron_count: state.neuron_count + 1,\n    }))\n  };\n\n  private add_work(id: number, price: number, prod: number) {\n    this.state.producers.map(p => p.key === id ? p.work_count += 1 : p.work_count);\n    this.state.producers.map(p => p.key === id ? p.prod_value += p.prod : p.prod_value);\n    this.setState(state => ({\n      neuron_count: state.neuron_count - price,\n      neuron_prod: this.calc_prod(),\n    }))\n  }\n\n  private add_multiplicator(id: number, price: number) {\n    this.setState(state => ({\n      neuron_count: state.neuron_count - price,\n      neuron_prod: this.calc_prod(),\n    }))\n    this.state.producers.map(p => p.key === id ? p.mult_count += 1 : p.mult_count)\n    this.state.producers.map(p => p.key === id ? p.prod *= p.mult_count : p.prod)\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this.setState(state => ({\n        neuron_count: state.neuron_count + this.state.neuron_prod,\n      }))\n    }, 1000);\n  }\n\n  render() {\n    const { neuron_count, neuron_prod } = this.state;\n    const producers_list = this.state.producers.map((p) =>\n      <Producer key={ p.key } id={ p.key } name={ p.name } neuron_count={ neuron_count } work_count={ p.work_count } add_work={ this.add_work.bind(this) } prod={p.prod} price={p.price} />\n    )\n    const multiplicators_list = this.state.producers.map((p) =>\n      <Multiplicator key={ p.key } id={ p.key } name={ p.name } neuron_count={ neuron_count } mult_count={ p.mult_count } add_multiplicator={ this.add_multiplicator.bind(this) } price={ p.mult_price } />\n    )\n\n    return (\n      <div className=\"App\">\n        <div>\n          <Row>\n            <Col md={5}>\n              <div className='noselect'>{ helpers.numberWithCommas(neuron_count) } neurons</div>\n              <div className='noselect'>{ helpers.numberWithCommas(neuron_prod) } per second</div>\n              <h1 onClick={ this.add_neuron } className='brain noselect'>BRAIN</h1>\n            </Col>\n            <Col md={5}>\n              {producers_list}\n            </Col>\n            <Col md={2}>\n              { multiplicators_list }\n            </Col>\n          </Row>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}